{"filter":false,"title":"app.py","tooltip":"/app.py","undoManager":{"mark":2,"position":2,"stack":[[{"start":{"row":0,"column":0},"end":{"row":136,"column":0},"action":"remove","lines":["from flask import Flask, render_template, request","from pymysql import connections","import os","import random","import argparse","","","app = Flask(__name__)","","DBHOST = os.environ.get(\"DBHOST\") or \"localhost\"","DBUSER = os.environ.get(\"DBUSER\") or \"root\"","DBPWD = os.environ.get(\"DBPWD\") or \"passwors\"","DATABASE = os.environ.get(\"DATABASE\") or \"employees\"","COLOR_FROM_ENV = os.environ.get('APP_COLOR') or \"lime\"","DBPORT = int(os.environ.get(\"DBPORT\"))","","# Create a connection to the MySQL database","db_conn = connections.Connection(","    host= DBHOST,","    port=DBPORT,","    user= DBUSER,","    password= DBPWD, ","    db= DATABASE","    ",")","output = {}","table = 'employee';","","# Define the supported color codes","color_codes = {","    \"red\": \"#e74c3c\",","    \"green\": \"#16a085\",","    \"blue\": \"#89CFF0\",","    \"blue2\": \"#30336b\",","    \"pink\": \"#f4c2c2\",","    \"darkblue\": \"#130f40\",","    \"lime\": \"#C1FF9C\",","}","","","# Create a string of supported colors","SUPPORTED_COLORS = \",\".join(color_codes.keys())","","# Generate a random color","COLOR = random.choice([\"red\", \"green\", \"blue\", \"blue2\", \"darkblue\", \"pink\", \"lime\"])","","","@app.route(\"/\", methods=['GET', 'POST'])","def home():","    return render_template('addemp.html', color=color_codes[COLOR])","","@app.route(\"/about\", methods=['GET','POST'])","def about():","    return render_template('about.html', color=color_codes[COLOR])","    ","@app.route(\"/addemp\", methods=['POST'])","def AddEmp():","    emp_id = request.form['emp_id']","    first_name = request.form['first_name']","    last_name = request.form['last_name']","    primary_skill = request.form['primary_skill']","    location = request.form['location']","","  ","    insert_sql = \"INSERT INTO employee VALUES (%s, %s, %s, %s, %s)\"","    cursor = db_conn.cursor()","","    try:","        ","        cursor.execute(insert_sql,(emp_id, first_name, last_name, primary_skill, location))","        db_conn.commit()","        emp_name = \"\" + first_name + \" \" + last_name","","    finally:","        cursor.close()","","    print(\"all modification done...\")","    return render_template('addempoutput.html', name=emp_name, color=color_codes[COLOR])","","@app.route(\"/getemp\", methods=['GET', 'POST'])","def GetEmp():","    return render_template(\"getemp.html\", color=color_codes[COLOR])","","","@app.route(\"/fetchdata\", methods=['GET','POST'])","def FetchData():","    emp_id = request.form['emp_id']","","    output = {}","    select_sql = \"SELECT emp_id, first_name, last_name, primary_skill, location from employee where emp_id=%s\"","    cursor = db_conn.cursor()","","    try:","        cursor.execute(select_sql,(emp_id))","        result = cursor.fetchone()","        ","        # Add No Employee found form","        output[\"emp_id\"] = result[0]","        output[\"first_name\"] = result[1]","        output[\"last_name\"] = result[2]","        output[\"primary_skills\"] = result[3]","        output[\"location\"] = result[4]","        ","    except Exception as e:","        print(e)","","    finally:","        cursor.close()","","    return render_template(\"getempoutput.html\", id=output[\"emp_id\"], fname=output[\"first_name\"],","                           lname=output[\"last_name\"], interest=output[\"primary_skills\"], location=output[\"location\"], color=color_codes[COLOR])","","if __name__ == '__main__':","    ","    # Check for Command Line Parameters for color","    parser = argparse.ArgumentParser()","    parser.add_argument('--color', required=False)","    args = parser.parse_args()","","    if args.color:","        print(\"Color from command line argument =\" + args.color)","        COLOR = args.color","        if COLOR_FROM_ENV:","            print(\"A color was set through environment variable -\" + COLOR_FROM_ENV + \". However, color from command line argument takes precendence.\")","    elif COLOR_FROM_ENV:","        print(\"No Command line argument. Color from environment variable =\" + COLOR_FROM_ENV)","        COLOR = COLOR_FROM_ENV","    else:","        print(\"No command line argument or environment variable. Picking a Random Color =\" + COLOR)","","    # Check if input color is a supported one","    if COLOR not in color_codes:","        print(\"Color not supported. Received '\" + COLOR + \"' expected one of \" + SUPPORTED_COLORS)","        exit(1)","","    app.run(host='0.0.0.0',port=8080,debug=True)",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":104,"column":0},"action":"insert","lines":["from flask import Flask, render_template, request","from pymysql import connections","import os","import boto3","","app = Flask(__name__)","","# Load environment variables","DBHOST = os.environ.get(\"DBHOST\", \"localhost\")","DBUSER = os.environ.get(\"DBUSER\", \"root\")","DBPWD = os.environ.get(\"DBPWD\", \"password\")","DATABASE = os.environ.get(\"DATABASE\", \"employees\")","DBPORT = int(os.environ.get(\"DBPORT\", \"3306\"))","","BACKGROUND_IMAGE_URL = os.environ.get(\"BACKGROUND_IMAGE_URL\", \"\")","MY_NAME = os.environ.get(\"MY_NAME\", \"CLO835 Student\")","","# Ensure static directory exists","if not os.path.exists(\"static\"):","    os.makedirs(\"static\")","","# Download image from S3","def download_image():","    if not BACKGROUND_IMAGE_URL:","        print(\"No BACKGROUND_IMAGE_URL set\")","        return","    try:","        s3 = boto3.client(\"s3\")","        bucket_name = BACKGROUND_IMAGE_URL.split(\"/\")[2].split(\".\")[0]","        key = \"/\".join(BACKGROUND_IMAGE_URL.split(\"/\")[3:])","        s3.download_file(bucket_name, key, \"static/bg.jpg\")","        print(f\"Downloaded background image from: {BACKGROUND_IMAGE_URL}\")","    except Exception as e:","        print(f\"Error downloading image: {e}\")","","# Create a connection to the MySQL database","db_conn = connections.Connection(","    host=DBHOST,","    port=DBPORT,","    user=DBUSER,","    password=DBPWD,","    db=DATABASE",")","","# Main Routes","@app.route(\"/\", methods=[\"GET\", \"POST\"])","def home():","    download_image()","    return render_template(\"addemp.html\", bg_image=\"bg.jpg\", my_name=MY_NAME)","","@app.route(\"/about\", methods=[\"GET\", \"POST\"])","def about():","    return render_template(\"about.html\", bg_image=\"bg.jpg\", my_name=MY_NAME)","","@app.route(\"/addemp\", methods=[\"POST\"])","def AddEmp():","    emp_id = request.form[\"emp_id\"]","    first_name = request.form[\"first_name\"]","    last_name = request.form[\"last_name\"]","    primary_skill = request.form[\"primary_skill\"]","    location = request.form[\"location\"]","","    insert_sql = \"INSERT INTO employee VALUES (%s, %s, %s, %s, %s)\"","    cursor = db_conn.cursor()","    try:","        cursor.execute(insert_sql, (emp_id, first_name, last_name, primary_skill, location))","        db_conn.commit()","        emp_name = f\"{first_name} {last_name}\"","    finally:","        cursor.close()","","    print(\"Data inserted into DB.\")","    return render_template(\"addempoutput.html\", name=emp_name, bg_image=\"bg.jpg\", my_name=MY_NAME)","","@app.route(\"/getemp\", methods=[\"GET\", \"POST\"])","def GetEmp():","    return render_template(\"getemp.html\", bg_image=\"bg.jpg\", my_name=MY_NAME)","","@app.route(\"/fetchdata\", methods=[\"GET\", \"POST\"])","def FetchData():","    emp_id = request.form[\"emp_id\"]","    output = {}","    select_sql = \"SELECT emp_id, first_name, last_name, primary_skill, location FROM employee WHERE emp_id=%s\"","    cursor = db_conn.cursor()","    try:","        cursor.execute(select_sql, (emp_id,))","        result = cursor.fetchone()","        if result:","            output[\"emp_id\"] = result[0]","            output[\"first_name\"] = result[1]","            output[\"last_name\"] = result[2]","            output[\"primary_skills\"] = result[3]","            output[\"location\"] = result[4]","    except Exception as e:","        print(e)","    finally:","        cursor.close()","","    return render_template(\"getempoutput.html\", id=output.get(\"emp_id\"), fname=output.get(\"first_name\"),","                           lname=output.get(\"last_name\"), interest=output.get(\"primary_skills\"),","                           location=output.get(\"location\"), bg_image=\"bg.jpg\", my_name=MY_NAME)","","if __name__ == '__main__':","    app.run(host='0.0.0.0', port=81, debug=True)",""]}],[{"start":{"row":0,"column":0},"end":{"row":104,"column":0},"action":"remove","lines":["from flask import Flask, render_template, request","from pymysql import connections","import os","import boto3","","app = Flask(__name__)","","# Load environment variables","DBHOST = os.environ.get(\"DBHOST\", \"localhost\")","DBUSER = os.environ.get(\"DBUSER\", \"root\")","DBPWD = os.environ.get(\"DBPWD\", \"password\")","DATABASE = os.environ.get(\"DATABASE\", \"employees\")","DBPORT = int(os.environ.get(\"DBPORT\", \"3306\"))","","BACKGROUND_IMAGE_URL = os.environ.get(\"BACKGROUND_IMAGE_URL\", \"\")","MY_NAME = os.environ.get(\"MY_NAME\", \"CLO835 Student\")","","# Ensure static directory exists","if not os.path.exists(\"static\"):","    os.makedirs(\"static\")","","# Download image from S3","def download_image():","    if not BACKGROUND_IMAGE_URL:","        print(\"No BACKGROUND_IMAGE_URL set\")","        return","    try:","        s3 = boto3.client(\"s3\")","        bucket_name = BACKGROUND_IMAGE_URL.split(\"/\")[2].split(\".\")[0]","        key = \"/\".join(BACKGROUND_IMAGE_URL.split(\"/\")[3:])","        s3.download_file(bucket_name, key, \"static/bg.jpg\")","        print(f\"Downloaded background image from: {BACKGROUND_IMAGE_URL}\")","    except Exception as e:","        print(f\"Error downloading image: {e}\")","","# Create a connection to the MySQL database","db_conn = connections.Connection(","    host=DBHOST,","    port=DBPORT,","    user=DBUSER,","    password=DBPWD,","    db=DATABASE",")","","# Main Routes","@app.route(\"/\", methods=[\"GET\", \"POST\"])","def home():","    download_image()","    return render_template(\"addemp.html\", bg_image=\"bg.jpg\", my_name=MY_NAME)","","@app.route(\"/about\", methods=[\"GET\", \"POST\"])","def about():","    return render_template(\"about.html\", bg_image=\"bg.jpg\", my_name=MY_NAME)","","@app.route(\"/addemp\", methods=[\"POST\"])","def AddEmp():","    emp_id = request.form[\"emp_id\"]","    first_name = request.form[\"first_name\"]","    last_name = request.form[\"last_name\"]","    primary_skill = request.form[\"primary_skill\"]","    location = request.form[\"location\"]","","    insert_sql = \"INSERT INTO employee VALUES (%s, %s, %s, %s, %s)\"","    cursor = db_conn.cursor()","    try:","        cursor.execute(insert_sql, (emp_id, first_name, last_name, primary_skill, location))","        db_conn.commit()","        emp_name = f\"{first_name} {last_name}\"","    finally:","        cursor.close()","","    print(\"Data inserted into DB.\")","    return render_template(\"addempoutput.html\", name=emp_name, bg_image=\"bg.jpg\", my_name=MY_NAME)","","@app.route(\"/getemp\", methods=[\"GET\", \"POST\"])","def GetEmp():","    return render_template(\"getemp.html\", bg_image=\"bg.jpg\", my_name=MY_NAME)","","@app.route(\"/fetchdata\", methods=[\"GET\", \"POST\"])","def FetchData():","    emp_id = request.form[\"emp_id\"]","    output = {}","    select_sql = \"SELECT emp_id, first_name, last_name, primary_skill, location FROM employee WHERE emp_id=%s\"","    cursor = db_conn.cursor()","    try:","        cursor.execute(select_sql, (emp_id,))","        result = cursor.fetchone()","        if result:","            output[\"emp_id\"] = result[0]","            output[\"first_name\"] = result[1]","            output[\"last_name\"] = result[2]","            output[\"primary_skills\"] = result[3]","            output[\"location\"] = result[4]","    except Exception as e:","        print(e)","    finally:","        cursor.close()","","    return render_template(\"getempoutput.html\", id=output.get(\"emp_id\"), fname=output.get(\"first_name\"),","                           lname=output.get(\"last_name\"), interest=output.get(\"primary_skills\"),","                           location=output.get(\"location\"), bg_image=\"bg.jpg\", my_name=MY_NAME)","","if __name__ == '__main__':","    app.run(host='0.0.0.0', port=81, debug=True)",""],"id":3},{"start":{"row":0,"column":0},"end":{"row":104,"column":0},"action":"insert","lines":["from flask import Flask, render_template, request","from pymysql import connections","import os","import boto3","","app = Flask(__name__)","","# Load environment variables","DBHOST = os.environ.get(\"DBHOST\", \"localhost\")","DBUSER = os.environ.get(\"DBUSER\", \"root\")","DBPWD = os.environ.get(\"DBPWD\", \"password\")","DATABASE = os.environ.get(\"DATABASE\", \"employees\")","DBPORT = int(os.environ.get(\"DBPORT\", \"3306\"))","","BACKGROUND_IMAGE_URL = os.environ.get(\"BACKGROUND_IMAGE_URL\", \"\")","MY_NAME = os.environ.get(\"MY_NAME\", \"CLO835 Student\")","","# Ensure static directory exists","if not os.path.exists(\"static\"):","    os.makedirs(\"static\")","","# Download image from S3","def download_image():","    if not BACKGROUND_IMAGE_URL:","        print(\"No BACKGROUND_IMAGE_URL set\")","        return","    try:","        s3 = boto3.client(\"s3\")","        bucket_name = BACKGROUND_IMAGE_URL.split(\"/\")[2].split(\".\")[0]","        key = \"/\".join(BACKGROUND_IMAGE_URL.split(\"/\")[3:])","        s3.download_file(bucket_name, key, \"static/bg.jpg\")","        print(f\"Downloaded background image from: {BACKGROUND_IMAGE_URL}\")","    except Exception as e:","        print(f\"Error downloading image: {e}\")","","# Create a connection to the MySQL database","db_conn = connections.Connection(","    host=DBHOST,","    port=DBPORT,","    user=DBUSER,","    password=DBPWD,","    db=DATABASE",")","","# Main Routes","@app.route(\"/\", methods=[\"GET\", \"POST\"])","def home():","    download_image()","    return render_template(\"addemp.html\", bg_image=\"bg.jpg\", my_name=MY_NAME)","","@app.route(\"/about\", methods=[\"GET\", \"POST\"])","def about():","    return render_template(\"about.html\", bg_image=\"bg.jpg\", my_name=MY_NAME)","","@app.route(\"/addemp\", methods=[\"POST\"])","def AddEmp():","    emp_id = request.form[\"emp_id\"]","    first_name = request.form[\"first_name\"]","    last_name = request.form[\"last_name\"]","    primary_skill = request.form[\"primary_skill\"]","    location = request.form[\"location\"]","","    insert_sql = \"INSERT INTO employee VALUES (%s, %s, %s, %s, %s)\"","    cursor = db_conn.cursor()","    try:","        cursor.execute(insert_sql, (emp_id, first_name, last_name, primary_skill, location))","        db_conn.commit()","        emp_name = f\"{first_name} {last_name}\"","    finally:","        cursor.close()","","    print(\"Data inserted into DB.\")","    return render_template(\"addempoutput.html\", name=emp_name, bg_image=\"bg.jpg\", my_name=MY_NAME)","","@app.route(\"/getemp\", methods=[\"GET\", \"POST\"])","def GetEmp():","    return render_template(\"getemp.html\", bg_image=\"bg.jpg\", my_name=MY_NAME)","","@app.route(\"/fetchdata\", methods=[\"GET\", \"POST\"])","def FetchData():","    emp_id = request.form[\"emp_id\"]","    output = {}","    select_sql = \"SELECT emp_id, first_name, last_name, primary_skill, location FROM employee WHERE emp_id=%s\"","    cursor = db_conn.cursor()","    try:","        cursor.execute(select_sql, (emp_id,))","        result = cursor.fetchone()","        if result:","            output[\"emp_id\"] = result[0]","            output[\"first_name\"] = result[1]","            output[\"last_name\"] = result[2]","            output[\"primary_skills\"] = result[3]","            output[\"location\"] = result[4]","    except Exception as e:","        print(e)","    finally:","        cursor.close()","","    return render_template(\"getempoutput.html\", id=output.get(\"emp_id\"), fname=output.get(\"first_name\"),","                           lname=output.get(\"last_name\"), interest=output.get(\"primary_skills\"),","                           location=output.get(\"location\"), bg_image=\"bg.jpg\", my_name=MY_NAME)","","if __name__ == '__main__':","    app.run(host='0.0.0.0', port=81, debug=True)",""]}],[{"start":{"row":36,"column":0},"end":{"row":36,"column":2},"action":"insert","lines":["# "],"id":4},{"start":{"row":37,"column":0},"end":{"row":37,"column":2},"action":"insert","lines":["# "]},{"start":{"row":38,"column":0},"end":{"row":38,"column":2},"action":"insert","lines":["# "]},{"start":{"row":39,"column":0},"end":{"row":39,"column":2},"action":"insert","lines":["# "]},{"start":{"row":40,"column":0},"end":{"row":40,"column":2},"action":"insert","lines":["# "]},{"start":{"row":41,"column":0},"end":{"row":41,"column":2},"action":"insert","lines":["# "]},{"start":{"row":42,"column":0},"end":{"row":42,"column":2},"action":"insert","lines":["# "]}]]},"ace":{"folds":[],"scrolltop":360,"scrollleft":0,"selection":{"start":{"row":32,"column":26},"end":{"row":32,"column":26},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":26,"state":"start","mode":"ace/mode/python"}},"timestamp":1753989174214,"hash":"b311efc68c0a75067f5d9eaa72240273f3991b5c"}